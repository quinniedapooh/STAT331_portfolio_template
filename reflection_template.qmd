---
title: "STAT 331 Portfolio"
author: "Quinton Wong Edited"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_C\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# Week 3 Lab 3 Question 2

evals <- read_csv(here::here("Week 3", "Lab 3", "teacher_evals.csv"))


```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# Week 4 Lab 4 Question 0

childcare_costs <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/childcare_costs.csv')

counties <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/counties.csv')

tax_rev <- read_csv('https://atheobold.github.io/groupworthy-data-science/labs/instructions/data/ca_tax_revenue.csv') 

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
# PA 4 Question 1

military <- read_xlsx("gov_spending_per_capita.xlsx",
                      sheet = "Share of Govt. spending",
                      skip  = 7,
                      n_max = 190,
                      na = c("..", ". .", "xxx")
                      )

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# Lab 3 Question 5

teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(teacher_id = as.character(teacher_id),
         course_id = as.character(course_id)) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2



```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3



```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# Lab 3 Question 5

teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(teacher_id = as.character(teacher_id),
         course_id = as.character(course_id)) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1
# Lab 4 Question 5

median_household_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(
    names_from = study_year,
    names_prefix = "median_income_",
    values_from = median_income
  ) |>
  arrange(desc("median_income_2018"))

```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
# Lab 3 Question 12

teacher_evals_clean |>
  filter(academic_degree %in% c("dr", "prof")) |>  
  group_by(teacher_id, seniority, sex) |>                       
  summarise(avg_resp = mean(resp_share, na.rm = TRUE), .groups = "drop") |> 
  filter(avg_resp == max(avg_resp) | 
           avg_resp == min(avg_resp))
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
# Lab 3 Question 10

teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  filter(n_distinct(course_id) >= 5) |>
  summarise(avg_q1_rating = mean(SET_score_avg, na.rm = TRUE)) |>
  filter(avg_q1_rating == max(avg_q1_rating) | 
           avg_q1_rating == min(avg_q1_rating))

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
# Lab 4 

get_fit_now_check_in |>
  filter(check_in_date == "20180109")

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1

```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
# Challenge 3 Question 1

teacher_evals_comp_ratings <- evals |>
  filter(question_no == 903) |>                                         
  mutate(
    set_level = if_else(SET_score_avg >= 4, "excellent", "standard"), 
    sen_level = case_when(                                           
      seniority <= 4 ~ "junior",
      seniority >= 5 & seniority <= 8 ~ "senior",
      seniority > 8 ~ "very senior"
    )
  ) |>
  select(course_id, set_level, sen_level)   

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
# Lab 4 Question 7
ca_childcare_pivot_long <- ca_childcare |>
  select(region, 
         study_year,
         mc_infant,
         mc_toddler,
         mc_preschool) |>
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
              names_to = "age_group",
              values_to = "price") |>
  mutate(age_group = recode(age_group,
          "mc_infant" = "Infant",
          "mc_toddler" = "Toddler",
          "mc_preschool" = "Preschool"),
        age_group = fct_reorder(.f = age_group, .x = price, .fun = median, .desc = TRUE),
        region = fct_reorder2(region, study_year, price)
  )

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
# Lab 4 Question 7

ca_childcare_pivot_long <- ca_childcare |>
  select(region, 
         study_year,
         mc_infant,
         mc_toddler,
         mc_preschool) |>
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
              names_to = "age_group",
              values_to = "price") |>
  mutate(age_group = recode(age_group,
          "mc_infant" = "Infant",
          "mc_toddler" = "Toddler",
          "mc_preschool" = "Preschool"),
        age_group = fct_reorder(.f = age_group, .x = price, .fun = median, .desc = TRUE),
        region = fct_reorder2(region, study_year, price)
  )


```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
# Challenge 3 Question 2

ggplot(data = teacher_evals_comp_ratings,
       mapping = aes(
         x = sen_level,
         fill = set_level
       )) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::label_percent) + #https://www.geeksforgeeks.org/r-language/change-y-axis-to-percentage-points-in-ggplot2-barplot-in-r/
  labs(
    title = "Evaluation of Teachers' Use of Activites",
    x = "Years of Experience",
    y= "",
    fill = "Evaluation Rating"
  ) +
  theme_bw() +
  theme(
    legend.position = "top" #https://www.datanovia.com/en/blog/ggplot-legend-title-position-and-labels/#change-legend-position

  )
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
# Challenge 3 Question 2

teacher_evals_comp_ratings <- evals |>
  filter(question_no == 903) |>                                         
  mutate(
    set_level = if_else(SET_score_avg >= 4, "excellent", "standard"), 
    sen_level = case_when(                                           
      seniority <= 4 ~ "junior",
      seniority >= 5 & seniority <= 8 ~ "senior",
      seniority > 8 ~ "very senior"
    )
  ) |>
  select(course_id, set_level, sen_level)   


```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
# Lab 2 Question 4

ggplot(data = surveys,
       mapping = aes(
         x = weight,
         y= hindfoot_length)) +
  geom_point(alpha = 0.25) +
  facet_wrap(~species) +
  labs(x = "Weight (g)",
       y="",
       title = "Comparison of Weight & Hindfoot Length for Rodent Species in the Portal Project",
       subtitle = "Hindfoot Length (mm)"
  ) +
  theme_bw()
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
# Challenge 3 Question 2

ggplot(data = teacher_evals_comp_ratings,
       mapping = aes(
         x = sen_level,
         fill = set_level
       )) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::label_percent) + #https://www.geeksforgeeks.org/r-language/change-y-axis-to-percentage-points-in-ggplot2-barplot-in-r/
  labs(
    title = "Evaluation of Teachers' Use of Activites",
    x = "Years of Experience",
    y= "",
    fill = "Evaluation Rating"
  ) +
  theme_bw() +
  theme(
    legend.position = "top" #https://www.datanovia.com/en/blog/ggplot-legend-title-position-and-labels/#change-legend-position

  )

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
# Lab 2 Question 4

ggplot(data = surveys,
       mapping = aes(
         x = weight,
         y= hindfoot_length)) +
  geom_point(alpha = 0.25) +
  facet_wrap(~species) +
  labs(x = "Weight (g)",
       y="",
       title = "Comparison of Weight & Hindfoot Length for Rodent Species in the Portal Project",
       subtitle = "Hindfoot Length (mm)"
  ) +
  theme_bw()

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3
# Lab 2 Question 4

ggplot(data = surveys,
       mapping = aes(
         x = weight,
         y= hindfoot_length)) +
  geom_point(alpha = 0.25) +
  facet_wrap(~species) +
  labs(x = "Weight (g)",
       y="",
       title = "Comparison of Weight & Hindfoot Length for Rodent Species in the Portal Project",
       subtitle = "Hindfoot Length (mm)"
  ) +
  theme_bw()

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5
# Lab 4 Question 7

ca_childcare_pivot_long <- ca_childcare |>
  select(region, 
         study_year,
         mc_infant,
         mc_toddler,
         mc_preschool) |>
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
              names_to = "age_group",
              values_to = "price") |>
  mutate(age_group = recode(age_group,
          "mc_infant" = "Infant",
          "mc_toddler" = "Toddler",
          "mc_preschool" = "Preschool"),
        age_group = fct_reorder(.f = age_group, .x = price, .fun = median, .desc = TRUE),
        region = fct_reorder2(region, study_year, price)
  )

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
# Challenge 2 Question 3

ggplot(data = penguins, 
       mapping = aes(x = bill_length_mm, y = species, color = island)
       ) +
  geom_boxplot() +
  scale_color_manual(values = untitled_red) +
  labs(x = "Bill Length (mm)", 
       y = "", 
       title = "Length of Different Penguin Species' Bills", 
       subtitle = "Separated by <span style = 'color:#c8251d;'>Biscoe</span>, <span style = 'color:#a11b26;'>Dream</span> and <span style = 'color:#ef6552;'>Torgenson</span> Islands") +
  theme(
    legend.position = "none", 
    plot.subtitle = element_markdown()
    ) +
  theme_bw()

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2
# Challenge 3 Question 2 

ggplot(data = teacher_evals_comp_ratings,
       mapping = aes(
         x = sen_level,
         fill = set_level
       )) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::label_percent) + #https://www.geeksforgeeks.org/r-language/change-y-axis-to-percentage-points-in-ggplot2-barplot-in-r/
  labs(
    title = "Evaluation of Teachers' Use of Activites",
    x = "Years of Experience",
    y= "",
    fill = "Evaluation Rating"
  ) +
  theme_bw() +
  theme(
    legend.position = "top" #https://www.datanovia.com/en/blog/ggplot-legend-title-position-and-labels/#change-legend-position

  )

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# Lab 3 Question 9

teacher_evals_clean |>
  group_by(teacher_id, course_id) |>
  summarize(num_questions = n_distinct(question_no), .groups = 'drop') |>
  filter(num_questions == 9) |>
  nrow()

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1
# Lab 4 Question 5

median_household_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(
    names_from = study_year,
    names_prefix = "median_income_",
    values_from = median_income
  ) |>
  arrange(desc("median_income_2018"))
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3
# Lab 4 Question 5

median_household_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(
    names_from = study_year,
    names_prefix = "median_income_",
    values_from = median_income
  ) |>
  arrange(desc("median_income_2018"))

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1
# Challenge 2 Question 2

ggplot(data = surveys,
       mapping = aes(
         x = weight,
         y = species,
         fill = sex)) +
  geom_jitter(width = 0.25, 
              alpha = 0.025,
              color = "deepskyblue") + #https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf
  geom_boxplot(outliers=FALSE) +
  scale_fill_brewer(palette="Accent") +#https://ggplot2.tidyverse.org/reference/scale_brewer.html
  labs(
    x = "Weight (g)",
    y = "Species of Rodent",
    title = "Distribution of Weight within Rodent Species in the Portal Project",
    fill = "Sex of Rodent") +
  theme_bw() +
  theme(axis.text.y = element_text(angle=45))


```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2
# Lab 4 Question 5

median_household_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(
    names_from = study_year,
    names_prefix = "median_income_",
    values_from = median_income
  ) |>
  arrange(desc("median_income_2018"))



```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
# Lab 4 Question 4

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
    region = fct_collapse(county_name,
      "Superior" = superior_counties,
      "North Coast" = north_coast_counties,
      "San Francisco Bay Area" = san_fran_counties,
      "North San Joaquin Valley" = n_san_joaquin_counties,
      "Central Coast" = central_coast_counties,
      "South San Joaquin Valley" = s_san_joaquin_counties,
      "Inland Empire" = inland_counties,
      "Los Angeles" = la_county,
      "Orange County" = orange_county,
      "San Diego & Imperial" = san_diego_imperial_counties))

```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
# Challenge 3 Question 2 

ggplot(data = teacher_evals_comp_ratings,
       mapping = aes(
         x = sen_level,
         fill = set_level
       )) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::label_percent) + #https://www.geeksforgeeks.org/r-language/change-y-axis-to-percentage-points-in-ggplot2-barplot-in-r/
  labs(
    title = "Evaluation of Teachers' Use of Activites",
    x = "Years of Experience",
    y= "",
    fill = "Evaluation Rating"
  ) +
  theme_bw() +
  theme(
    legend.position = "top" #https://www.datanovia.com/en/blog/ggplot-legend-title-position-and-labels/#change-legend-position

  )

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statistical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
# Challenge 3 Question 3

teacher_evals_comp_ratings |>
  select(set_level, sen_level) |>               
  table() |>                                    
  chisq.test()

```

-   Example 2

```{r}
#| label: dsm-2-2
# Lab 4 Question 9

reg_mod1 <- lm(mc_infant ~ mhi_2018, data = ca_childcare)
summary(reg_mod1)

```

-   Example 3

```{r}
#| label: dsm-2-3
# Lab 1 Question 9

t.test(len ~ supp, data = ToothGrowth, alternative = "two.sided", var.equal = FALSE)

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

One of the biggest points that I've learned from Professor Theobold's feedback is the importance of considering what is and isn't important for the reader to see in the output. Ideally, your code should have enough context that someone other than you can understand your code and your thought process while also omitting the details that are not necessary or confusing.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

When learning to extend my thinking, I focused on how I could apply my past feedback from labs and challenges into future projects. Although I would sometimes forget about previous feedback noted, I tried to repeatedly implement feedback when possible.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

Here is a peer review I'm proud of: For starters, you've done a great job with consistent indenting and new lines for each layer, which made your document really easy to read. You've also used named arguments for all your code, which further adds to the readability of your work. The only suggestion I have is to consider separating out arguments for lines that have many of them on new lines, like you've done for the labels, so that the arguments are easier to distinguish. But overall, your code is very clear and readable!

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

One of the biggest things I've learned through peer programming is being able to adapt to different viewpoints, as there are many times when my my approach to solving a problem would be different than someone else.
